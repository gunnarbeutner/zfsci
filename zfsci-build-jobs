#!/usr/bin/env python
import os
import json
import itertools
import subprocess
import hashlib

def products(variants):
	# http://stackoverflow.com/questions/3873654/combinations-from-dictionary-with-list-values-using-python
	varNames = sorted(variants)
	return [
		dict(zip(varNames, prod))
		for prod in itertools.product(*(variants[varName] for varName in varNames))
	]

def get_attributes():
	fp = open('jobs/jobs.conf', 'r')

	attributes = []

	for line in fp:
		line = line.strip()

		if len(line) == 0 or line[0] == '#':
			continue

		tokens = line.split(' ', 1)

		if len(tokens) < 2:
			print 'Warning: Ignoring invalid job attribute definition: %s' % (line)
			continue

		attributes.append(map(lambda x: x.strip(), tokens))

	fp.close()

	return attributes

def get_values(attribute):
	script = 'jobs/' + attribute[1]

	print 'Running script for attribute "%s": %s' % (attribute[0], script)
	values = subprocess.Popen([script], stdout=subprocess.PIPE).communicate()[0]

	return values.strip().split('\n')

def hash_jobinput(jobinput):
	hash = hashlib.md5()

	for key in sorted(jobinput.iterkeys()):
		hash.update(key)
		hash.update(jobinput[key])

	hash.digest()

	return hash.hexdigest()

try:
	os.makedirs('build/jobs')
except OSError:
	pass

attribvalues = {}
for attribute in get_attributes():
	attribvalues[attribute[0]] = get_values(attribute)

jobinputs = products(attribvalues)

for jobinput in jobinputs:
	jobhash = hash_jobinput(jobinput)

	jobdesc = {
		'job_id': jobhash,
		'input': jobinput
	}

	fp = open('build/jobs/%s.json' % (jobhash), 'w')
	json.dump(jobdesc, fp)
	fp.close()

print 'Successfully built %d job descriptions.' % (len(jobinputs))
