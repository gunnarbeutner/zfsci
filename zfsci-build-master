#!/bin/sh
if ! cd `dirname $0`; then
	echo "Could not cd to source directory."
	exit 1
fi

. ./zfsci.conf

LOGFILE=`mktemp --tmpdir zfsci.XXXXXX`

echo "Building zfsci image... (build output can be found in $LOGFILE)"

# redirect stdout/stderr to log file
exec 9>&1 1>$LOGFILE 2>&1

zfsci_echo() {
	echo $@
	echo $@ >&9
}

# re-create build directory
zfsci_echo -n "Creating build directory... "
mkdir -p build
rm -Rf build/nfsroot build/tftpboot
mkdir -p build/nfsroot build/tftpboot
zfsci_echo "DONE"

# disable init scripts in the build environment
mkdir -p build/nfsroot/usr/sbin
cat > build/nfsroot/usr/sbin/policy-rc.d <<POLICYRCD
#!/bin/sh
exit 101
POLICYRCD
chmod +x build/nfsroot/usr/sbin/policy-rc.d

zfsci_echo -n "Building NFS root filesystem... "
if ! debootstrap squeeze build/nfsroot $DEBIAN_MIRROR; then
	zfsci_echo "FAILED"
	zfsci_echo "Error: debootstrap failed."
	exit 1
fi
zfsci_echo "DONE"

cat > build/tftpboot/pxelinux-config <<PXELINUX
prompt 1
timeout 10
default linux

label linux
	kernel $TFTP_PATH/kernel
	append root=/dev/nfs initrd=$TFTP_PATH/initrd netboot=nfs ro nfsroot=$NFS_ROOT_PATH,v3,udp ip=dhcp panic=300 aufs=tmpfs
PXELINUX

zfsci_echo -n "Copying kernel and modules... "
KERNELVER=`uname -r`

if ! grep ^CONFIG_CRASH_DUMP=y /boot/config-$KERNELVER >/dev/null 2>&1; then
	zfsci_echo "FAILED"
	zfsci_echo "Error: Your kernel does not support crash dumps (CONFIG_CRASH_DUMP)."
	exit 1
fi

KERNEL=/boot/vmlinuz-$KERNELVER
INITRD=/boot/initrd.img-$KERNELVER
if [ ! -e $KERNEL ]; then
	zfsci_echo "FAILED"
	zfsci_echo "Error: Could not find kernel (in: $KERNEL)."
	exit 1
fi
cp $KERNEL build/tftpboot/
chmod 644 build/tftpboot/vmlinuz-$KERNELVER
ln -s vmlinuz-$KERNELVER build/tftpboot/kernel

mkdir -p build/nfsroot/lib/modules
cp -a /lib/modules/$KERNELVER build/nfsroot/lib/modules

# we won't need the kernel when booting via PXE, however
# the node install scripts re-uses this kernel as the
# node's crash kernel
mkdir -p build/nfsroot/boot
cp $KERNEL build/nfsroot/boot

zfsci_echo "DONE"

zfsci_echo -n "Generating initrd... "
cp -a /etc/initramfs-tools build/
cat >> build/initramfs-tools/initramfs.conf <<NFSCONFIG
MODULES=netboot
BOOT=nfs
NFSCONFIG

echo aufs >> build/initramfs-tools/modules

cp misc/rootaufs build/initramfs-tools/scripts/init-bottom/__rootaufs
chmod +x build/initramfs-tools/scripts/init-bottom/__rootaufs

if ! mkinitramfs -d build/initramfs-tools -o build/tftpboot/initrd.img-$KERNELVER $KERNELVER; then
	zfsci_echo "FAILED"
	zfsci_echo "Error: mkinitramfs failed."
	exit 1
fi
rm -Rf build/initramfs-tools
chmod 644 build/tftpboot/initrd.img-$KERNELVER
ln -s initrd.img-$KERNELVER build/tftpboot/initrd

zfsci_echo "DONE"

# set root password (if you want to log in on the zfsci nodes you'll have to
# set a root password for the build box or figure out a better way for this)
zfsci_echo -n "Setting root password... "
grep -v ^root build/nfsroot/etc/shadow > build/nfsroot/etc/.shadow &&
	grep ^root /etc/shadow >> build/nfsroot/etc/.shadow &&
	cat build/nfsroot/etc/.shadow > build/nfsroot/etc/shadow &&
	rm -f build/nfsroot/etc/.shadow
zfsci_echo "DONE"

zfsci_echo -n "Updating package lists... "
chroot build/nfsroot aptitude update
zfsci_echo "DONE"

zfsci_echo -n "Installing utilities... "
chroot build/nfsroot aptitude install -y kexec-tools debootstrap \
	parted hdparm ntpdate nfs-client aufs-tools flock python
zfsci_echo "DONE"

zfsci_echo -n "Setting up network... "
# We don't have to worry about eth0/etc. here, the kernel already
# sets up this interface for us thanks to the 'ip=dhcp' kernel
# parameter.
cat > build/nfsroot/etc/network/interfaces <<INTERFACES
auto lo
iface lo inet loopback
INTERFACES

echo zfsci > build/nfsroot/etc/hostname

cat > build/nfsroot/etc/hosts <<HOSTS
127.0.0.1	localhost
127.0.0.1	zfsci
HOSTS

zfsci_echo "DONE"

zfsci_echo -n "Setting up fstab..."
cat > build/nfsroot/etc/fstab <<FSTAB
$NFS_PERSISTENT_PATH	/var/lib/zfsci-data	nfs	v3,udp	0	0
FSTAB

# http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=434570
cat >> build/nfsroot/etc/default/rcS <<RCSCONFIG
ASYNCMOUNTNFS=no
RCSCONFIG

mkdir -p build/nfsroot/var/lib/zfsci-data
zfsci_echo "DONE"

zfsci_echo -n "Fixing file-system for read-only NFS root..."
rm -f build/nfsroot/etc/udev/rules.d/*persistent*
ln -sf /proc/mounts build/nfsroot/etc/mtab
zfsci_echo "DONE"

zfsci_echo -n "Setting up zfsci scripts... "
cat > build/nfsroot/etc/rc.local <<RCLOCAL
#!/bin/sh
ntpdate pool.ntp.org >/dev/null 2>&1 &
/opt/zfsci/zfsci-extract-result
/opt/zfsci/zfsci-pick-job

#cat >> /etc/crontab <<CRONTAB
#*/5	*	*	*	*	root	flock -x /tmp/zfs-pick-job-lock /opt/zfsci/zfsci-pick-job
#CRONTAB

exit 0
RCLOCAL

ln -s /var/lib/zfsci-data/opt-zfsci build/nfsroot/opt/zfsci
zfsci_echo "DONE"

# re-enable init scripts
rm -f build/nfsroot/usr/sbin/policy-rc.d

zfsci_echo "Build completed."
exit 0
