#!/bin/sh
if ! cd `dirname $0`; then
	echo "Could not cd to source directory."
	exit 1
fi

. ./zfsci.conf

# re-create build directory
rm -Rf build
mkdir -p build/nfsroot build/tftpboot

cat > build/tftpboot/pxelinux-config <<PXELINUX
prompt 1
timeout 10
default linux

label linux
	kernel $TFTP_PATH/kernel
	append root=/dev/nfs initrd=$TFTP_PATH/initrd netboot=nfs ro nfsroot=$NFS_PATH,v3,udp ip=dhcp panic=100 vga=0x317
PXELINUX

echo "Copying kernel and modules..."
KERNELVER=`uname -r`

if ! grep ^CONFIG_CRASH_DUMP=y /boot/config-$KERNELVER >/dev/null 2>&1; then
	echo "Your kernel does not support crash dumps (CONFIG_CRASH_DUMP)."
	exit 1
fi

KERNEL=/boot/vmlinuz-$KERNELVER
INITRD=/boot/initrd.img-$KERNELVER
if [ ! -e $KERNEL ]; then
	echo "Could not find kernel (in: $KERNEL)."
	exit 1
fi
cp $KERNEL build/tftpboot/
mkdir -p build/nfsroot/lib/modules
cp -a /lib/modules/$KERNELVER build/nfsroot/lib/modules
ln -s vmlinuz-$KERNELVER build/tftpboot/kernel

# we won't need the kernel when booting via PXE, however
# the node install scripts re-uses this kernel as the
# node's crash kernel
mkdir -p build/nfsroot/boot
cp $KERNEL build/nfsroot/boot

echo "Generating initrd..."
cp -a /etc/initramfs-tools build/
cat >> build/initramfs-tools/initramfs.conf <<NFSCONFIG
MODULES=netboot
BOOT=nfs
NFSCONFIG

if ! mkinitramfs -d build/initramfs-tools -o build/tftpboot/initrd.img-$KERNELVER $KERNELVER; then
	echo "mkinitramfs failed."
	exit 1
fi
rm -Rf build/initramfs-tools
ln -s initrd.img-$KERNELVER build/tftpboot/initrd

DEBOOTSTRAP_OUTPUT="/tmp/debootstrap.`date +%s`"
echo "Building NFS root filesystem..."
if ! debootstrap squeeze build/nfsroot $DEBIAN_MIRROR >$DEBOOTSTRAP_OUTPUT 2>&1; then
	cat $DEBOOTSTRAP_OUTPUT
	rm -f $DEBOOTSTRAP_OUTPUT

	echo "debootstrap failed."
	exit 1
fi

rm -f $DEBOOTSTRAP_OUTPUT

# disable syslog and cron
echo "Disabling syslog and cron..."
chroot build/nfsroot update-rc.d -f rsyslog remove
chroot build/nfsroot update-rc.d -f cron remove

# set root password (if you want to log in on the zfsci nodes you'll have to
# set a root password for the build box or figure out a better way for this)
echo "Setting root password..."
grep -v ^root build/nfsroot/etc/shadow > build/nfsroot/etc/.shadow &&
	grep ^root /etc/shadow >> build/nfsroot/etc/.shadow &&
	cat build/nfsroot/etc/.shadow > build/nfsroot/etc/shadow &&
	rm -f build/nfsroot/etc/.shadow

echo "Updating package lists..."
chroot build/nfsroot aptitude update

echo "Installing utilities..."
chroot build/nfsroot aptitude install -y kexec-tools debootstrap \
	parted hdparm

echo "Setting up network interfaces..."
# We don't have to worry about eth0/etc. here, the kernel already
# sets up this interface for us thanks to the 'ip=dhcp' kernel
# parameter.
cat > build/nfsroot/etc/network/interfaces <<INTERFACES
auto lo
iface lo inet loopback
INTERFACES

echo "Setting hostname..."
echo $MASTER_HOSTNAME > build/nfsroot/etc/hostname

cat > build/nfsroot/etc/hosts <<HOSTS
127.0.0.1	localhost
127.0.0.1	$MASTER_HOSTNAME
HOSTS

echo "Setting up script for result extraction..."
cat > build/nfsroot/etc/rc.local <<RCLOCAL
/opt/zfsci/zfsci-extract-result
exit 0
RCLOCAL

echo "Copying zfsci scripts..."
cp -a scripts build/nfsroot/opt/zfsci
cp zfsci.conf build/nfsroot/opt/zfsci

echo "Build completed."
