#!/usr/bin/env python2.6
import sys
import os
import json
import cgi
from datetime import datetime
from joblib import Job, JobResult, get_job_session

if len(sys.argv) < 2:
	print "Syntax: %s <output-dir>" % (sys.argv[0])
	sys.exit(1)

resultdir = sys.argv[1]

session = get_job_session()
jobs = Job.find_all(session)

try:
	os.makedirs(resultdir + '/jobs')
except OSError:
	pass

try:
	os.makedirs(resultdir + '/results')
except OSError:
	pass

# detailed job/result pages
for job in jobs:
	jfp = open(resultdir + '/jobs/' + job.hash + '.html', 'w')

	attribs = json.JSONEncoder(indent=1).encode(job.attributes)

	jfp.write("""
<html>
<head>
	<title>Job: %s</title>
</head>
<body>
<h1>Job %s</h1>

<h2>Input</h2>
<pre>%s</pre>

<h2>Results</h2>
<ul>
""" % (job.hash, job.hash, cgi.escape(attribs)))

	for result in job.results:
		jfp.write("""
<li><a href="../results/%s.html">%s</a></li>
""" % (result.hash, result.hash))

		rfp = open(resultdir + '/results/' + result.hash + '.html', 'w')

		rfp.write("""
<html>
<head>
	<title>Result: %s</title>
</head>
<body>
<h1>Result %s</h1>

<h2>Job</h2>
<a href="../jobs/%s.html">%s</a>

<h2>General Information</h2>
<table>
  <tr>
    <td>Time:</td>
    <td>%s - %s (%s)</td>
  </tr>
</table>

<h2>Tasks</h2>
""" % (result.hash, result.hash, job.hash, job.hash, \
	result.run_start, '?' if result.run_end == None else result.run_end, \
	'incomplete' if result.run_end == None else result.run_end - result.run_start))

		for taskresult in result.taskresults:
			rfp.write("""
<h3>Task %s</h3>
<table>
  <tr>
    <td>Stage:</td>
    <td>%s</td>
  </tr>
  <tr>
    <td>Time:</td>
    <td>%s - %s (%s)</td>
  </tr>
  <tr>
    <td>Status:</td>
    <td>%s</td>
  </tr>
</table>
""" % (cgi.escape(taskresult.name), taskresult.stage, \
	'?' if taskresult.run_start == None else taskresult.run_start, '?' if taskresult.run_end == None else taskresult.run_end, \
	'incomplete' if taskresult.run_end == None else taskresult.run_end - taskresult.run_start, \
	taskresult.status))

			if len(taskresult.attributes) > 0:
				rfp.write("""
<table>
  <tr>
    <th>Parameter</th>
    <th style="text-align: left;">Value</th>
  </tr>
""")

				for (key, value) in taskresult.attributes.iteritems():
					rfp.write("""
  <tr>
    <td style="vertical-align: top;">%s</td>
    <td style="vertical-align: top;"><pre>%s</pre></td>
  </tr>
""" % (cgi.escape(str(key)), cgi.escape(str(value))))

				rfp.write("""
</table>
""")

		rfp.close()

	jfp.write("""
</ul>

</body>
</html>
""")

	jfp.close()

mfp = open(resultdir + '/zfsci.html', 'w')

mfp.write("""
<html>
<head>
	<title>ZFSCI results</title>
</head>
<body>

<h1>ZFSCI</h1>

<h2>Legend</h2>

<table>
  <tr>
    <th style="background-color: red; width: 50px;" />
    <td>Build error</td>
  </tr>
  <tr>
    <th style="background-color: orange;" />
    <td>Build system problem</td>
  </tr>
  <tr>
    <th style="background-color: chartreuse;" />
    <td>Successful build</td>
  </tr>
</table>

""")

timestamps = []

def find_branch_combinations(jobs):
	results = set()

	for job in jobs:
		if job.attributes['zfs-git-repo'] == None:
			continue

		result = (job.attributes['zfs-git-repo']['zfs-repository'], \
			job.attributes['zfs-git-repo']['spl-branch'], \
			job.attributes['zfs-git-repo']['zfs-branch'])

		results.add(result)

	return results

def get_timestamp(job):
	return int(job.attributes['zfs-git-repo']['timestamp'])

def get_host(job):
	return job.attributes['distribution'] + ' ' + job.attributes['kernel-version']

def get_result_color(result):
	type = result.get_result_type()

	if type == JobResult.SYSTEM_ERROR:
		return 'orange'
	elif type == JobResult.BUILD_ERROR:
		return 'red'
	else:
		return 'chartreuse'

def build_branch_table(fp, jobs, repository, splbranch, zfsbranch):
	fp.write("""
<table>
  <tr>
    <th>Repository</th>
    <td>%s</td>
  </tr>
  <tr>
    <th>SPL branch</th>
    <td>%s</td>
  </tr>
  <tr>
    <th>ZFS branch</th>
    <td>%s</td>
  </tr>
</table>
""" % (repository, splbranch, zfsbranch))

	def filter_job(job):
		if job.attributes['zfs-git-repo'] == None:
			return False

		if job.attributes['zfs-git-repo']['zfs-repository'] != repository:
			return False

		if job.attributes['zfs-git-repo']['spl-branch'] != splbranch or \
				job.attributes['zfs-git-repo']['zfs-branch'] != zfsbranch:
			return False

		return True

	jobs = filter(filter_job, jobs)

	hosts = []
	cells = {}

	for job in jobs:
		host = get_host(job)

		if host not in hosts:
			hosts.append(host)

		timestamp = get_timestamp(job)

		if not timestamp in cells:
			cells[timestamp] = []

		cells[timestamp].append(job)

	hosts = sorted(hosts)

	fp.write("""
<table>
<tr>
  <td>Timestamp / Host</td>
""")

	for host in hosts:
		fp.write('<td>' + host + '</td>')

	fp.write("""
</tr>
""")

	for timestamp in reversed(sorted(set(map(get_timestamp, jobs)))):
		fp.write("""
<tr>
  <td>%s</td>
""" % (datetime.fromtimestamp(timestamp)))

		for host in hosts:
			result = None

			for job in cells[timestamp]:
				if get_host(job) != host:
					continue

				best_result = None
				for result in job.results:
					if result.count_errors() == 0:
						best_result = result
						break

					if best_result == None or result.timestamp > best_result.timestamp:
						best_result = result
				result = best_result

				break

			if result == None:
				mfp.write('<td>&#8212;</td>') # Unicode EM DASH
				continue

			errors = result.count_errors()

			fp.write("""
<td style="background-color: %s;">
  <a href="results/%s.html">
    %d errors
  </a>
</td>""" % (get_result_color(result), result.hash, errors))

		fp.write('</tr>')

	fp.write("""
</table>

</body>
</html>
""")

mfp.write("<h2>Test results</h2>")

for branch_combination in find_branch_combinations(jobs):
	build_branch_table(mfp, jobs, branch_combination[0], branch_combination[1], branch_combination[2])
	mfp.write("<br /><br />")

mfp.close()
