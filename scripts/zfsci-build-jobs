#!/usr/bin/env python2.6
import sys
import os
import glob
import json
from tasklib import Attribute, Utility
from joblib import Job, JobResult, get_job_session
from time import time

os.chdir(Utility.get_source_dir())

for taskfile in glob.glob('jobs/*.py'):
	cwd = os.getcwd()
	execfile(taskfile, globals())
	os.chdir(cwd)

try:
	os.makedirs('build/jobs')
except OSError:
	pass

config = Utility.get_zfsci_config()

count_new = 0
count_existing = 0
count_retry = 0

jobsession = get_job_session()

jobdescs = Attribute.get_jobdescs()
for jobdesc in jobdescs:
	job = Job.get_by_hash(jobsession, jobdesc['job_id'])

	jobdesc['priority'] = 0

	if job == None:
		job = Job(jobdesc['job_id'])
		job.attributes = jobdesc['input']
		jobsession.add(job)
		count_new += 1

		continue

	if job.available:
		count_existing += 1
		continue

	retry_job = True
	latest_result = None

	for result in job.results:
		if latest_result == None or result.timestamp > latest_result.run_start:
			latest_result = result

		if result.count_errors() == 0:
			retry_job = False
			break

	if latest_result != None and datetime.now() - latest_result.run_start < config['job_retry_interval']:
		retry_job = False

	if latest_result != None and latest_result.get_result_type() == JobResult.BUILD_ERROR:
		jobdesc['priority'] += 1

	if not retry_job:
		continue

	job.available = True
	count_retry += 1

jobsession.commit()

print 'Existing: %d, New: %d, retry: %d' % (count_existing, count_new, count_retry)

sys.exit(0)
